#[compute]
#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

// 3D density source
layout(set = 0, binding = 0) uniform sampler3D noise_tex;

// Push constants for parameters
layout(push_constant, std140) uniform PC {
    float iso;
    vec3 grid_origin;
    vec3 cell_size;
    ivec3 grid_dims;
} pc;

// Output triangle data
layout(set = 0, binding = 1, std430) buffer Triangles {
    vec4 data[]; // x,y,z,w, nx,ny,nz,w packed consecutively
} triangles;

// Atomic counter for vertex count
layout(set = 0, binding = 2, std430) buffer Counter {
    uint vert_count;
} counter;

// --- CORRECTED LOOKUP TABLES ---

const ivec2 EdgeVertexIndices[12] = ivec2[](
    ivec2(0, 1), ivec2(1, 3), ivec2(3, 2), ivec2(2, 0),
    ivec2(4, 5), ivec2(5, 7), ivec2(7, 6), ivec2(6, 4),
    ivec2(0, 4), ivec2(1, 5), ivec2(3, 7), ivec2(2, 6)
);

// This table maps a marching cubes case index (0-255) to a list of
// vertex indices that form the triangles for that case's mesh.
// Each triangle is a set of 3 integers. The list for each case is
// terminated by -1. A maximum of 5 triangles (15 indices) are possible.
const int TriangleTable[256*16] = int[256*16](
	// Case 0
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 1
	3, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 2
	1, 0, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 3
	9, 1, 8, 8, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 4
	3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 5
	2, 11, 0, 0, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 6
	1, 0, 9, 3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 7
	11, 1, 2, 11, 9, 1, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1,
	// Case 8
	10, 2, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 9
	2, 1, 10, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 10
	0, 9, 2, 2, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 11
	8, 2, 3, 8, 10, 2, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1,
	// Case 12
	1, 10, 3, 3, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 13
	10, 0, 1, 10, 8, 0, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1,
	// Case 14
	9, 3, 0, 9, 11, 3, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1,
	// Case 15
	9, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 16
	7, 4, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 17
	0, 3, 4, 4, 3, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 18
	0, 9, 1, 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 19
	1, 4, 9, 1, 7, 4, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1,
	// Case 20
	11, 3, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 21
	4, 11, 7, 4, 2, 11, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1,
	// Case 22
	3, 2, 11, 0, 9, 1, 4, 8, 7, -1, -1, -1, -1, -1, -1, -1,
	// Case 23
	9, 1, 4, 4, 1, 7, 7, 1, 2, 7, 2, 11, -1, -1, -1, -1,
	// Case 24
	7, 4, 8, 1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 25
	7, 4, 3, 3, 4, 0, 10, 2, 1, -1, -1, -1, -1, -1, -1, -1,
	// Case 26
	10, 2, 9, 9, 2, 0, 7, 4, 8, -1, -1, -1, -1, -1, -1, -1,
	// Case 27
	7, 4, 9, 7, 9, 2, 9, 10, 2, 3, 7, 2, -1, -1, -1, -1,
	// Case 28
	1, 10, 3, 3, 10, 11, 4, 8, 7, -1, -1, -1, -1, -1, -1, -1,
	// Case 29
	4, 0, 7, 0, 1, 10, 7, 0, 10, 7, 10, 11, -1, -1, -1, -1,
	// Case 30
	7, 4, 8, 9, 3, 0, 9, 11, 3, 9, 10, 11, -1, -1, -1, -1,
	// Case 31
	7, 4, 11, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1,
	// Case 32
	5, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 33
	8, 0, 3, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 34
	1, 0, 5, 5, 0, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 35
	5, 8, 4, 5, 3, 8, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1,
	// Case 36
	3, 2, 11, 5, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 37
	2, 11, 0, 0, 11, 8, 5, 9, 4, -1, -1, -1, -1, -1, -1, -1,
	// Case 38
	4, 5, 0, 0, 5, 1, 11, 3, 2, -1, -1, -1, -1, -1, -1, -1,
	// Case 39
	11, 8, 2, 8, 4, 5, 2, 8, 5, 2, 5, 1, -1, -1, -1, -1,
	// Case 40
	5, 9, 4, 1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 41
	0, 3, 8, 1, 10, 2, 5, 9, 4, -1, -1, -1, -1, -1, -1, -1,
	// Case 42
	2, 5, 10, 2, 4, 5, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1,
	// Case 43
	4, 5, 8, 8, 5, 3, 3, 5, 10, 3, 10, 2, -1, -1, -1, -1,
	// Case 44
	11, 3, 10, 10, 3, 1, 4, 5, 9, -1, -1, -1, -1, -1, -1, -1,
	// Case 45
	4, 5, 9, 10, 0, 1, 10, 8, 0, 10, 11, 8, -1, -1, -1, -1,
	// Case 46
	4, 5, 10, 4, 10, 3, 10, 11, 3, 0, 4, 3, -1, -1, -1, -1,
	// Case 47
	4, 5, 8, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1,
	// Case 48
	5, 9, 7, 7, 9, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 49
	3, 9, 0, 3, 5, 9, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1,
	// Case 50
	7, 0, 8, 7, 1, 0, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1,
	// Case 51
	3, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 52
	5, 9, 7, 7, 9, 8, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1,
	// Case 53
	5, 9, 0, 5, 0, 11, 0, 2, 11, 7, 5, 11, -1, -1, -1, -1,
	// Case 54
	2, 11, 3, 7, 0, 8, 7, 1, 0, 7, 5, 1, -1, -1, -1, -1,
	// Case 55
	2, 11, 1, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1,
	// Case 56
	8, 7, 9, 9, 7, 5, 2, 1, 10, -1, -1, -1, -1, -1, -1, -1,
	// Case 57
	10, 2, 1, 3, 9, 0, 3, 5, 9, 3, 7, 5, -1, -1, -1, -1,
	// Case 58
	2, 0, 10, 0, 8, 7, 10, 0, 7, 10, 7, 5, -1, -1, -1, -1,
	// Case 59
	10, 2, 5, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1,
	// Case 60
	5, 9, 8, 5, 8, 7, 1, 10, 3, 10, 11, 3, -1, -1, -1, -1,
	// Case 61
	1, 10, 0, 0, 10, 11, 0, 11, 7, 0, 7, 5, 0, 5, 9, -1,
	// Case 62
	8, 7, 0, 0, 7, 5, 0, 5, 10, 0, 10, 11, 0, 11, 3, -1,
	// Case 63
	5, 11, 7, 10, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 64
	11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 65
	3, 8, 0, 7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 66
	1, 0, 9, 7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 67
	9, 1, 8, 8, 1, 3, 6, 7, 11, -1, -1, -1, -1, -1, -1, -1,
	// Case 68
	6, 7, 2, 2, 7, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 69
	0, 7, 8, 0, 6, 7, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1,
	// Case 70
	6, 7, 2, 2, 7, 3, 9, 1, 0, -1, -1, -1, -1, -1, -1, -1,
	// Case 71
	9, 1, 2, 9, 2, 7, 2, 6, 7, 8, 9, 7, -1, -1, -1, -1,
	// Case 72
	10, 2, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 73
	2, 1, 10, 3, 8, 0, 7, 11, 6, -1, -1, -1, -1, -1, -1, -1,
	// Case 74
	0, 9, 2, 2, 9, 10, 7, 11, 6, -1, -1, -1, -1, -1, -1, -1,
	// Case 75
	6, 7, 11, 8, 2, 3, 8, 10, 2, 8, 9, 10, -1, -1, -1, -1,
	// Case 76
	7, 10, 6, 7, 1, 10, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1,
	// Case 77
	1, 10, 0, 0, 10, 8, 8, 10, 6, 8, 6, 7, -1, -1, -1, -1,
	// Case 78
	9, 10, 0, 10, 6, 7, 0, 10, 7, 0, 7, 3, -1, -1, -1, -1,
	// Case 79
	6, 7, 10, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1,
	// Case 80
	4, 8, 6, 6, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 81
	6, 3, 11, 6, 0, 3, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1,
	// Case 82
	11, 6, 8, 8, 6, 4, 1, 0, 9, -1, -1, -1, -1, -1, -1, -1,
	// Case 83
	6, 4, 11, 4, 9, 1, 11, 4, 1, 11, 1, 3, -1, -1, -1, -1,
	// Case 84
	2, 8, 3, 2, 4, 8, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1,
	// Case 85
	0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 86
	9, 1, 0, 2, 8, 3, 2, 4, 8, 2, 6, 4, -1, -1, -1, -1,
	// Case 87
	9, 1, 4, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1,
	// Case 88
	4, 8, 6, 6, 8, 11, 1, 10, 2, -1, -1, -1, -1, -1, -1, -1,
	// Case 89
	1, 10, 2, 6, 3, 11, 6, 0, 3, 6, 4, 0, -1, -1, -1, -1,
	// Case 90
	0, 9, 10, 0, 10, 2, 4, 8, 6, 8, 11, 6, -1, -1, -1, -1,
	// Case 91
	11, 6, 3, 3, 6, 4, 3, 4, 9, 3, 9, 10, 3, 10, 2, -1,
	// Case 92
	1, 10, 6, 1, 6, 8, 6, 4, 8, 3, 1, 8, -1, -1, -1, -1,
	// Case 93
	1, 10, 0, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1,
	// Case 94
	0, 9, 3, 3, 9, 10, 3, 10, 6, 3, 6, 4, 3, 4, 8, -1,
	// Case 95
	4, 10, 6, 9, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 96
	4, 5, 9, 6, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 97
	7, 11, 6, 8, 0, 3, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1,
	// Case 98
	1, 0, 5, 5, 0, 4, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1,
	// Case 99
	11, 6, 7, 5, 8, 4, 5, 3, 8, 5, 1, 3, -1, -1, -1, -1,
	// Case 100
	3, 2, 7, 7, 2, 6, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1,
	// Case 101
	5, 9, 4, 0, 7, 8, 0, 6, 7, 0, 2, 6, -1, -1, -1, -1,
	// Case 102
	1, 0, 4, 1, 4, 5, 3, 2, 7, 2, 6, 7, -1, -1, -1, -1,
	// Case 103
	4, 5, 8, 8, 5, 1, 8, 1, 2, 8, 2, 6, 8, 6, 7, -1,
	// Case 104
	6, 7, 11, 5, 9, 4, 1, 10, 2, -1, -1, -1, -1, -1, -1, -1,
	// Case 105
	5, 9, 4, 7, 11, 6, 0, 3, 8, 2, 1, 10, -1, -1, -1, -1,
	// Case 106
	7, 11, 6, 2, 5, 10, 2, 4, 5, 2, 0, 4, -1, -1, -1, -1,
	// Case 107
	6, 7, 11, 3, 8, 4, 3, 4, 5, 3, 5, 2, 2, 5, 10, -1,
	// Case 108
	9, 4, 5, 7, 10, 6, 7, 1, 10, 7, 3, 1, -1, -1, -1, -1,
	// Case 109
	5, 9, 4, 8, 0, 1, 8, 1, 10, 8, 10, 7, 7, 10, 6, -1,
	// Case 110
	6, 7, 10, 10, 7, 3, 10, 3, 0, 10, 0, 4, 10, 4, 5, -1,
	// Case 111
	4, 5, 8, 8, 5, 10, 8, 10, 6, 8, 6, 7, -1, -1, -1, -1,
	// Case 112
	9, 6, 5, 9, 11, 6, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1,
	// Case 113
	0, 3, 9, 9, 3, 5, 5, 3, 11, 5, 11, 6, -1, -1, -1, -1,
	// Case 114
	1, 0, 8, 1, 8, 6, 8, 11, 6, 5, 1, 6, -1, -1, -1, -1,
	// Case 115
	11, 6, 3, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1,
	// Case 116
	2, 6, 3, 6, 5, 9, 3, 6, 9, 3, 9, 8, -1, -1, -1, -1,
	// Case 117
	5, 9, 6, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1,
	// Case 118
	3, 2, 8, 8, 2, 6, 8, 6, 5, 8, 5, 1, 8, 1, 0, -1,
	// Case 119
	1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 120
	2, 1, 10, 9, 6, 5, 9, 11, 6, 9, 8, 11, -1, -1, -1, -1,
	// Case 121
	2, 1, 10, 5, 9, 0, 5, 0, 3, 5, 3, 6, 6, 3, 11, -1,
	// Case 122
	10, 2, 5, 5, 2, 0, 5, 0, 8, 5, 8, 11, 5, 11, 6, -1,
	// Case 123
	10, 2, 5, 5, 2, 3, 5, 3, 11, 5, 11, 6, -1, -1, -1, -1,
	// Case 124
	5, 9, 6, 6, 9, 8, 6, 8, 3, 6, 3, 1, 6, 1, 10, -1,
	// Case 125
	5, 9, 6, 6, 9, 0, 6, 0, 1, 6, 1, 10, -1, -1, -1, -1,
	// Case 126
	8, 3, 0, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 127
	6, 5, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 128
	6, 10, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 129
	3, 8, 0, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 130
	9, 1, 0, 10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 131
	3, 8, 1, 1, 8, 9, 6, 10, 5, -1, -1, -1, -1, -1, -1, -1,
	// Case 132
	6, 10, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 133
	8, 0, 11, 11, 0, 2, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1,
	// Case 134
	10, 5, 6, 1, 0, 9, 3, 2, 11, -1, -1, -1, -1, -1, -1, -1,
	// Case 135
	5, 6, 10, 11, 1, 2, 11, 9, 1, 11, 8, 9, -1, -1, -1, -1,
	// Case 136
	2, 1, 6, 6, 1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 137
	5, 6, 1, 1, 6, 2, 8, 0, 3, -1, -1, -1, -1, -1, -1, -1,
	// Case 138
	6, 9, 5, 6, 0, 9, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1,
	// Case 139
	8, 9, 3, 9, 5, 6, 3, 9, 6, 3, 6, 2, -1, -1, -1, -1,
	// Case 140
	3, 6, 11, 3, 5, 6, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1,
	// Case 141
	5, 6, 11, 5, 11, 0, 11, 8, 0, 1, 5, 0, -1, -1, -1, -1,
	// Case 142
	0, 9, 3, 3, 9, 11, 11, 9, 5, 11, 5, 6, -1, -1, -1, -1,
	// Case 143
	5, 6, 9, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1,
	// Case 144
	7, 4, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 145
	0, 3, 4, 4, 3, 7, 10, 5, 6, -1, -1, -1, -1, -1, -1, -1,
	// Case 146
	4, 8, 7, 9, 1, 0, 10, 5, 6, -1, -1, -1, -1, -1, -1, -1,
	// Case 147
	6, 10, 5, 1, 4, 9, 1, 7, 4, 1, 3, 7, -1, -1, -1, -1,
	// Case 148
	11, 3, 2, 7, 4, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1,
	// Case 149
	10, 5, 6, 4, 11, 7, 4, 2, 11, 4, 0, 2, -1, -1, -1, -1,
	// Case 150
	7, 4, 8, 3, 2, 11, 9, 1, 0, 10, 5, 6, -1, -1, -1, -1,
	// Case 151
	10, 5, 6, 7, 4, 9, 7, 9, 1, 7, 1, 11, 11, 1, 2, -1,
	// Case 152
	2, 1, 6, 6, 1, 5, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1,
	// Case 153
	7, 4, 0, 7, 0, 3, 5, 6, 1, 6, 2, 1, -1, -1, -1, -1,
	// Case 154
	8, 7, 4, 6, 9, 5, 6, 0, 9, 6, 2, 0, -1, -1, -1, -1,
	// Case 155
	5, 6, 9, 9, 6, 2, 9, 2, 3, 9, 3, 7, 9, 7, 4, -1,
	// Case 156
	4, 8, 7, 3, 6, 11, 3, 5, 6, 3, 1, 5, -1, -1, -1, -1,
	// Case 157
	7, 4, 11, 11, 4, 0, 11, 0, 1, 11, 1, 5, 11, 5, 6, -1,
	// Case 158
	4, 8, 7, 11, 3, 0, 11, 0, 9, 11, 9, 6, 6, 9, 5, -1,
	// Case 159
	5, 6, 9, 9, 6, 11, 9, 11, 7, 9, 7, 4, -1, -1, -1, -1,
	// Case 160
	9, 4, 10, 10, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 161
	6, 10, 4, 4, 10, 9, 3, 8, 0, -1, -1, -1, -1, -1, -1, -1,
	// Case 162
	0, 10, 1, 0, 6, 10, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1,
	// Case 163
	3, 8, 4, 3, 4, 10, 4, 6, 10, 1, 3, 10, -1, -1, -1, -1,
	// Case 164
	9, 4, 10, 10, 4, 6, 3, 2, 11, -1, -1, -1, -1, -1, -1, -1,
	// Case 165
	8, 0, 2, 8, 2, 11, 9, 4, 10, 4, 6, 10, -1, -1, -1, -1,
	// Case 166
	11, 3, 2, 0, 10, 1, 0, 6, 10, 0, 4, 6, -1, -1, -1, -1,
	// Case 167
	2, 11, 1, 1, 11, 8, 1, 8, 4, 1, 4, 6, 1, 6, 10, -1,
	// Case 168
	4, 1, 9, 4, 2, 1, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1,
	// Case 169
	3, 8, 0, 4, 1, 9, 4, 2, 1, 4, 6, 2, -1, -1, -1, -1,
	// Case 170
	4, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 171
	3, 8, 2, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1,
	// Case 172
	3, 1, 11, 1, 9, 4, 11, 1, 4, 11, 4, 6, -1, -1, -1, -1,
	// Case 173
	9, 4, 1, 1, 4, 6, 1, 6, 11, 1, 11, 8, 1, 8, 0, -1,
	// Case 174
	11, 3, 6, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1,
	// Case 175
	8, 6, 11, 4, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 176
	10, 7, 6, 10, 8, 7, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1,
	// Case 177
	10, 9, 6, 9, 0, 3, 6, 9, 3, 6, 3, 7, -1, -1, -1, -1,
	// Case 178
	8, 7, 0, 0, 7, 1, 1, 7, 6, 1, 6, 10, -1, -1, -1, -1,
	// Case 179
	6, 10, 7, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1,
	// Case 180
	3, 2, 11, 10, 7, 6, 10, 8, 7, 10, 9, 8, -1, -1, -1, -1,
	// Case 181
	6, 10, 7, 7, 10, 9, 7, 9, 0, 7, 0, 2, 7, 2, 11, -1,
	// Case 182
	11, 3, 2, 1, 0, 8, 1, 8, 7, 1, 7, 10, 10, 7, 6, -1,
	// Case 183
	6, 10, 7, 7, 10, 1, 7, 1, 2, 7, 2, 11, -1, -1, -1, -1,
	// Case 184
	8, 7, 6, 8, 6, 1, 6, 2, 1, 9, 8, 1, -1, -1, -1, -1,
	// Case 185
	0, 3, 9, 9, 3, 7, 9, 7, 6, 9, 6, 2, 9, 2, 1, -1,
	// Case 186
	8, 7, 0, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1,
	// Case 187
	7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 188
	11, 3, 6, 6, 3, 1, 6, 1, 9, 6, 9, 8, 6, 8, 7, -1,
	// Case 189
	11, 7, 6, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 190
	11, 3, 6, 6, 3, 0, 6, 0, 8, 6, 8, 7, -1, -1, -1, -1,
	// Case 191
	11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 192
	10, 5, 11, 11, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 193
	10, 5, 11, 11, 5, 7, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1,
	// Case 194
	7, 11, 5, 5, 11, 10, 0, 9, 1, -1, -1, -1, -1, -1, -1, -1,
	// Case 195
	3, 8, 9, 3, 9, 1, 7, 11, 5, 11, 10, 5, -1, -1, -1, -1,
	// Case 196
	5, 2, 10, 5, 3, 2, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1,
	// Case 197
	0, 2, 8, 2, 10, 5, 8, 2, 5, 8, 5, 7, -1, -1, -1, -1,
	// Case 198
	0, 9, 1, 5, 2, 10, 5, 3, 2, 5, 7, 3, -1, -1, -1, -1,
	// Case 199
	10, 5, 2, 2, 5, 7, 2, 7, 8, 2, 8, 9, 2, 9, 1, -1,
	// Case 200
	1, 11, 2, 1, 7, 11, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1,
	// Case 201
	8, 0, 3, 1, 11, 2, 1, 7, 11, 1, 5, 7, -1, -1, -1, -1,
	// Case 202
	0, 9, 5, 0, 5, 11, 5, 7, 11, 2, 0, 11, -1, -1, -1, -1,
	// Case 203
	3, 8, 2, 2, 8, 9, 2, 9, 5, 2, 5, 7, 2, 7, 11, -1,
	// Case 204
	5, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 205
	8, 0, 7, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1,
	// Case 206
	0, 9, 3, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1,
	// Case 207
	9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 208
	8, 5, 4, 8, 10, 5, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1,
	// Case 209
	10, 5, 4, 10, 4, 3, 4, 0, 3, 11, 10, 3, -1, -1, -1, -1,
	// Case 210
	1, 0, 9, 8, 5, 4, 8, 10, 5, 8, 11, 10, -1, -1, -1, -1,
	// Case 211
	9, 1, 4, 4, 1, 3, 4, 3, 11, 4, 11, 10, 4, 10, 5, -1,
	// Case 212
	10, 5, 2, 2, 5, 3, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1,
	// Case 213
	10, 5, 2, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1,
	// Case 214
	9, 1, 0, 3, 2, 10, 3, 10, 5, 3, 5, 8, 8, 5, 4, -1,
	// Case 215
	10, 5, 2, 2, 5, 4, 2, 4, 9, 2, 9, 1, -1, -1, -1, -1,
	// Case 216
	1, 5, 2, 5, 4, 8, 2, 5, 8, 2, 8, 11, -1, -1, -1, -1,
	// Case 217
	2, 1, 11, 11, 1, 5, 11, 5, 4, 11, 4, 0, 11, 0, 3, -1,
	// Case 218
	4, 8, 5, 5, 8, 11, 5, 11, 2, 5, 2, 0, 5, 0, 9, -1,
	// Case 219
	5, 4, 9, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 220
	4, 8, 5, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1,
	// Case 221
	0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 222
	0, 9, 3, 3, 9, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1,
	// Case 223
	5, 4, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 224
	11, 4, 7, 11, 9, 4, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1,
	// Case 225
	0, 3, 8, 11, 4, 7, 11, 9, 4, 11, 10, 9, -1, -1, -1, -1,
	// Case 226
	0, 4, 1, 4, 7, 11, 1, 4, 11, 1, 11, 10, -1, -1, -1, -1,
	// Case 227
	7, 11, 4, 4, 11, 10, 4, 10, 1, 4, 1, 3, 4, 3, 8, -1,
	// Case 228
	9, 4, 7, 9, 7, 2, 7, 3, 2, 10, 9, 2, -1, -1, -1, -1,
	// Case 229
	8, 0, 7, 7, 0, 2, 7, 2, 10, 7, 10, 9, 7, 9, 4, -1,
	// Case 230
	1, 0, 10, 10, 0, 4, 10, 4, 7, 10, 7, 3, 10, 3, 2, -1,
	// Case 231
	7, 8, 4, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 232
	9, 4, 1, 1, 4, 2, 2, 4, 7, 2, 7, 11, -1, -1, -1, -1,
	// Case 233
	8, 0, 3, 2, 1, 9, 2, 9, 4, 2, 4, 11, 11, 4, 7, -1,
	// Case 234
	7, 11, 4, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1,
	// Case 235
	3, 8, 2, 2, 8, 4, 2, 4, 7, 2, 7, 11, -1, -1, -1, -1,
	// Case 236
	9, 4, 1, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1,
	// Case 237
	9, 4, 1, 1, 4, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1,
	// Case 238
	3, 4, 7, 0, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 239
	7, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 240
	8, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 241
	0, 3, 9, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1,
	// Case 242
	1, 0, 10, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1,
	// Case 243
	10, 3, 11, 1, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 244
	3, 2, 8, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1,
	// Case 245
	9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 246
	1, 0, 10, 10, 0, 8, 10, 8, 3, 10, 3, 2, -1, -1, -1, -1,
	// Case 247
	2, 10, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 248
	2, 1, 11, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1,
	// Case 249
	2, 1, 11, 11, 1, 9, 11, 9, 0, 11, 0, 3, -1, -1, -1, -1,
	// Case 250
	11, 0, 8, 2, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 251
	3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 252
	1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 253
	1, 9, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 254
	8, 3, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	// Case 255
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
);


// Function to get density value, converting grid coords to normalized texture coords
float get_density(ivec3 coord) {
    vec3 uvw = vec3(coord) / vec3(pc.grid_dims);
    return texture(noise_tex, uvw).r;
}

// Function to get gradient, using normalized texture coords
vec3 get_gradient(vec3 world_pos) {
    vec3 grad;
    float eps = 1.0 / float(pc.grid_dims.x); // Epsilon scaled to one cell
    
    vec3 uvw = world_pos / (vec3(pc.grid_dims) * pc.cell_size);

    grad.x = texture(noise_tex, uvw + vec3(eps, 0, 0)).r - texture(noise_tex, uvw - vec3(eps, 0, 0)).r;
    grad.y = texture(noise_tex, uvw + vec3(0, eps, 0)).r - texture(noise_tex, uvw - vec3(0, eps, 0)).r;
    grad.z = texture(noise_tex, uvw + vec3(0, 0, eps)).r - texture(noise_tex, uvw - vec3(0, 0, eps)).r;
    
    return normalize(grad);
}


void main() {
    uvec3 id = gl_GlobalInvocationID;
    if (id.x >= uint(pc.grid_dims.x) || id.y >= uint(pc.grid_dims.y) || id.z >= uint(pc.grid_dims.z)) {
        return;
    }

    float d[8];
    ivec3 corner_coords[8];
    for (int i = 0; i < 8; ++i) {
        ivec3 offset = ivec3(i & 1, (i >> 1) & 1, (i >> 2) & 1);
        corner_coords[i] = ivec3(id) + offset;
        d[i] = get_density(corner_coords[i]);
    }

    int cubeIndex = 0;
    for (int i = 0; i < 8; ++i) {
        if (d[i] < pc.iso) { // Note: often marching cubes convention is < iso is inside
            cubeIndex |= 1 << i;
        }
    }
    
    // The EdgeMasks table is often unnecessary if the TriangleTable is complete
    // as it will simply have -1 for the first entry in empty cells.
    if (TriangleTable[cubeIndex*16+0] == -1) {
        return;
    }

    for (int t = 0; t < 15; t += 3) {
        // This access was already correct
        if (TriangleTable[cubeIndex * 16 + t] == -1) {
            break;
        }

        vec3 vert_pos[3];
        for (int v = 0; v < 3; ++v) {
            // CORRECTED THIS LINE:
            int edge_index = TriangleTable[cubeIndex * 16 + t + v];

            ivec2 edge_verts = EdgeVertexIndices[edge_index];
            int i0 = edge_verts.x;
            int i1 = edge_verts.y;

            float d0 = d[i0];
            float d1 = d[i1];

            float tval = (pc.iso - d0) / (d1 - d0);
            
            vec3 p0 = pc.grid_origin + vec3(corner_coords[i0]) * pc.cell_size;
            vec3 p1 = pc.grid_origin + vec3(corner_coords[i1]) * pc.cell_size;
            
            vert_pos[v] = mix(p0, p1, tval);
        }

        // Calculate face normal from the triangle's vertices
        vec3 face_normal = normalize(cross(vert_pos[1] - vert_pos[0], vert_pos[2] - vert_pos[0]));

        uint base_idx = atomicAdd(counter.vert_count, 3);
        
        // Store the three vertices
        triangles.data[base_idx * 2 + 0] = vec4(vert_pos[0], 1.0);
        triangles.data[base_idx * 2 + 1] = vec4(face_normal, 0.0);

        triangles.data[base_idx * 2 + 2] = vec4(vert_pos[1], 1.0);
        triangles.data[base_idx * 2 + 3] = vec4(face_normal, 0.0);
        
        triangles.data[base_idx * 2 + 4] = vec4(vert_pos[2], 1.0);
        triangles.data[base_idx * 2 + 5] = vec4(face_normal, 0.0);
    }
}